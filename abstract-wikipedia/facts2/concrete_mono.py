import csv

name_cat = 'CName'
column_pairs = [(0,1),(2,3),(6,7),(8,9)]

def read_data(datafile):
    with open(datafile) as f:
        rdr = csv.reader(f,delimiter='\t')
        data = [tuple(row) for row in rdr]
        return data

def get_id_label_pairs(data):
    pairs = []
    for row in data[1:]: # skip the heading
        for (i,l) in column_pairs:
            id = row[i].split('/')[-1].replace('>','')
            label = row[l].split('@')[0]
            pairs.append((id,label))
    return pairs

def create_concrete(pairs,lang_code):
    concrete_str =  f'concrete CountryNames{lang_code} of CountryNames = \n\n'
    concrete_str += f'open Syntax{lang_code}, Paradigms{lang_code} in ' + '{\n\n'
    concrete_str += 'lincat CName = NP ;\n\n'
    concrete_str += 'oper mkCName : Str -> NP = \s -> mkNP (mkPN s) ;\n\n'

    for (id,label) in pairs:
        concrete_str += f'lin wd_{id}_CName = mkCName "{label}" ;\n'

    concrete_str += '}'

    concrete_filename = f'CountryNames{lang_code}.gf'
    with open(concrete_filename,'w') as f:
        f.write(concrete_str)

if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser("script to create a concrete file for CountryNames"+
                                      "from output such as generated by hrv-names.sparql")
    parser.add_argument('datafile',help='path to monolingual datafile')
    parser.add_argument('gf_lang_code',help='GF style language code (eg. "Afr")')

    args = parser.parse_args()

    data = read_data(args.datafile)
    pairs = get_id_label_pairs(data)
    create_concrete(pairs,args.gf_lang_code)
